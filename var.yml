- name: variable on play level
  hosts: all
  vars:
    URL: play.example.com
  tasks:
    - name: Print URL
      ansible.builtin.debug:
        msg: URL= {{URL}}

#note: if we declare a variable on play level then we can access that variable in all tasks

- name: variable on file
  hosts: all
  vars_files:
    - sample-var.yml
  tasks:
    - name: Print URL
      ansible.builtin.debug:
        msg: URL == {{URL}}

#note: we can load all the variables from the file, since it is on play level, all the tasks can access those variable

- name: variable on task level
  hosts: all
  tasks:
    - name: Print task1 URL
      ansible.builtin.debug:
        msg: URL == {{URL}}
      vars:
        URL: task1.example.com

    - name: Print task2 URL
      ansible.builtin.debug:
        msg: URL == {{URL}}
      vars:
        URL: task2.example.com

#note: Scope of task variable is only to that particular tasks, no other task can't access that

- name: variable for precedence
  hosts: all
  vars:
    URL: pre.example.com
  vars_files:
    - sample-var.yml
  tasks:
    - name: Print URL
      ansible.builtin.debug:
        msg: URL == {{URL}}
      vars:
        URL: task.example.com

- name: variable in inventory
  hosts: all
  tasks:
    - name: Print URL
      ansible.builtin.debug:
        msg: URL = {{URL}}

- name: pre defined varaible
  hosts: all
  tasks:
    - name: Predifined
      ansible.builtin.debug:
        msg: URL = {{ansible_hostname}}
    - name: Print the processesor
      ansible.builtin.debug:
        msg: "{{ansible_processor}}"

- name: runtime variable
  hosts: all
  tasks:
    - name: run uptime variable
      ansible.builtin.shell: uptime
      register: OUT
    - name: print out variable
      ansible.builtin.debug:
        msg: "{{OUT}}"

- name: runtime variable2
  hosts: all
  tasks:
    - name: run uptime std variable
      ansible.builtin.set_fact:
        UPTIME_STDOUT: "{{OUT.stdout}}"

    - name: print uptime stdout
      ansible.builtin.debug:
        msg: "{{UPTIME_STDOUT}}"